using System.Globalization;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Lljxww.ApiCaller.Client;

[Generator]
public class CallerClientGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
    }

    public void Execute(GeneratorExecutionContext context)
    {
        // ApiCallerConfig config = new()
        // {
        //     ServiceItems = new List<ServiceItem>
        //     {
        //         new()
        //         {
        //             ApiName = "gh",
        //             AuthorizationType = string.Empty,
        //             BaseUrl = "https://api.github.com",
        //             Timeout = 4000,
        //             ApiItems = new List<ApiItem>
        //             {
        //                 new()
        //                 {
        //                     Method = "GetUserInfo",
        //                     Url = "/users/{username}",
        //                     HttpMethod = "GET",
        //                     ParamType = "path",
        //                     Description = "查询Github用户信息",
        //                     NeedCache = false
        //                 }
        //             }
        //         }
        //     }
        // };

        const string name = "Lljxww.ApiCaller.Client";
        const string typeName = "CallerClient";
        string version = Assembly.GetAssembly(GetType()).GetName().Version.ToString();

        string source = $@"// Auto-generated by Lljxww.ApiCaller.Client {version}
// Client for Lljxww.ApiCaller
using System;
using System.Threading.Tasks;
using Lljxww.ApiCaller;
using Lljxww.ApiCaller.Models;

namespace {name} {{
    public class {typeName} {{
        private readonly Caller _caller;

        public {typeName}(Caller caller){{
            _caller = caller;
        }}
";
        StringBuilder sourceBuilder = new(source);
        const string end = @"
    }
}
";

        // 添加以配置的方法
        // foreach (ServiceItem? serviceItem in config.ServiceItems)
        // {
        //     foreach (ApiItem? apiItem in serviceItem.ApiItems)
        //     {
        //         sourceBuilder.Append(GetMethodSourceCode(serviceItem.ApiName, apiItem.Method));
        //     }
        // }

        string method = @"
        public async Task<ApiResult> GhGetUserInfoAsync(object param, RequestOption option = null) {
            return await _caller.InvokeAsync(""gh.GetUserInfo"", param, option);
        }
";

        sourceBuilder.Append(method);

        sourceBuilder.Append(end);

        context.AddSource($"{typeName}.g.cs",
            SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
    }

    private static string GetMethodSourceCode(string endpoint, string method)
    {
        string methodSourceCode = $@"
        public async Task<ApiResult> {GetPascalCase(endpoint)}{GetPascalCase(method)}Async(object param, RequestOption option = null) {{
            return await _caller.InvokeAsync(""{method}"", param, option);
        }}
";

        return methodSourceCode;
    }

    private static string GetPascalCase(string word)
    {
        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(word);
    }
}