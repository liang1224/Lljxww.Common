using Lljxww.ApiCaller.Models.Config;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Globalization;
using System.Reflection;
using System.Text;

namespace Lljxww.ApiCaller.Client;

[Generator]
public class CallerClientGenerator : ISourceGenerator
{
    private ApiCallerConfig config;
    private StringBuilder sourceBuilder;
    private const string generatedNamespace = "Lljxww.ApiCaller.Client";
    private const string generatedTypeName = "CallerClient";

    public void Initialize(GeneratorInitializationContext context)
    {
        config = new()
        {
            ServiceItems = new List<ServiceItem>
            {
                new()
                {
                    ApiName = "gh",
                    AuthorizationType = string.Empty,
                    BaseUrl = "https://api.github.com",
                    Timeout = 4000,
                    ApiItems = new List<ApiItem>
                    {
                        new()
                        {
                            Method = "GetUserInfo",
                            Url = "/users/{username}",
                            HttpMethod = "GET",
                            ParamType = "path",
                            Description = "查询Github用户信息",
                            NeedCache = false
                        }
                    }
                }
            }
        };

        string version = Assembly.GetAssembly(GetType()).GetName().Version.ToString();

        string sourceCodeStartSnippet = $@"// Auto-generated by Lljxww.ApiCaller.Client {version}
                            // Client for Lljxww.ApiCaller
                            using System;
                            using System.Threading.Tasks;
                            using Lljxww.ApiCaller;

                            namespace {generatedNamespace} {{
                                public class {generatedTypeName} {{
                                    private readonly Caller _caller;

                                    public {generatedTypeName}(Caller caller){{
                                        _caller = caller;
                                    }}
                            ";

        const string sourceCodeEndSnippet = @"
                                }
                            }
                            ";

        sourceBuilder = new(sourceCodeStartSnippet);

        // 添加已配置的方法
        //foreach (ServiceItem? serviceItem in config.ServiceItems)
        //{
        //    foreach (ApiItem? apiItem in serviceItem.ApiItems)
        //    {
        //        sourceBuilder.Append(GetMethodSourceCode(serviceItem.ApiName, apiItem.Method,
        //            apiItem.Description));
        //    }
        //}

        sourceBuilder.Append(sourceCodeEndSnippet);
    }

    public void Execute(GeneratorExecutionContext context)
    {
        context.AddSource($"{generatedTypeName}.g.cs",
            SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
    }

    /// <summary>
    /// 使用给定的配置生成单个方法代码文本
    /// </summary>
    /// <param name="endpoint">终结点</param>
    /// <param name="method">方法</param>
    /// <param name="note">方法注释</param>
    /// <returns></returns>
    private static string GetMethodSourceCode(string endpoint, string method, string note)
    {
        string methodSourceCode = $@"
        /// <summary>
        /// {note}
        /// </summary>
        /// <param name=""param"">请求参数</param>
        /// <param name=""option"">请求配置</param>
        public async Task<ApiResult> {GetPascalCase(endpoint)}{GetPascalCase(method)}Async(object param, RequestOption option = null) {{
            return await _caller.InvokeAsync(""{endpoint}.{method}"", param, option);
        }}

";

        return methodSourceCode;
    }

    /// <summary>
    /// 将给定的文本转换为Pascal格式
    /// </summary>
    /// <param name="word"></param>
    /// <returns></returns>
    private static string GetPascalCase(string word)
    {
        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(word);
    }
}